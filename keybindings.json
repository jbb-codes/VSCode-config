# VSCode-Neovim Configuration

A comprehensive VSCode configuration that combines the power of Visual Studio Code with Neovim's modal editing capabilities, creating a LazyVim-like experience within VSCode.

## üåü Overview

This repository contains a complete VSCode setup that bridges the gap between modern IDE features and Vim's efficient modal editing. By leveraging the `vscode-neovim` extension along with carefully crafted keybindings, this configuration provides:

- **LazyVim-inspired keybindings** - Familiar shortcuts for Neovim/LazyVim users
- **Seamless integration** - VSCode's powerful features accessible through Vim motions
- **Consistent workflow** - Modal editing with IDE-grade tooling
- **Customizable interface** - Clean, distraction-free environment

## üìÅ Repository Structure

```
.
‚îú‚îÄ‚îÄ README.md                  # This documentation
‚îú‚îÄ‚îÄ settings.json              # VSCode user settings
‚îú‚îÄ‚îÄ keybindings.json           # VSCode keybindings configuration
‚îú‚îÄ‚îÄ vscode-neovim-keymaps.lua  # Neovim keymaps for VSCode integration
‚îú‚îÄ‚îÄ vscode-extensions.md       # Recommended extensions list
```

## üöÄ Key Features

### LazyVim-Style Keybindings
The `vscode-neovim-keymaps.lua` file provides LazyVim-inspired keybindings that work seamlessly with VSCode:

- **Leader Key**: `Space` - Primary prefix for most commands
- **Window Management**: `<leader>h/j/k/l` for navigation
- **Buffer Operations**: `<leader>bd`, `<leader>bo`, etc.
- **File Operations**: `<leader>ff`, `<leader>fg`, `<leader>fr`
- **Git Integration**: `<leader>gg`, `<leader>gb`, `<leader>gd`
- **Code Actions**: `<leader>ca`, `<leader>cf`, `K` for hover

### VSCode Integration
The configuration leverages VSCode's command palette through Neovim:

```lua
-- Example: Open file explorer
keymap("n", "<leader>e", "<cmd>lua require('vscode').action('workbench.view.explorer')<CR>")

-- Example: Format document
keymap("n", "<leader>cf", "<cmd>lua require('vscode').action('editor.action.formatDocument')<CR>")
```

### Multi-Command Macros
Complex workflows are simplified using the `multi-command` extension:

```json
{
  "command": "multiCommand.openFileAndCloseExplorer",
  "sequence": ["list.select", "workbench.action.closeSidebar"]
}
```

## üõ† Installation & Setup

### Prerequisites

1. **Neovim** (version 0.8+)
2. **Visual Studio Code**

### System-Specific Installation

#### macOS
```bash
# Install Neovim via Homebrew
brew install neovim
```

#### Linux (Ubuntu/Debian)
```bash
# Install Neovim
sudo apt update
sudo apt install neovim
```

#### Linux (Arch)
```bash
# Install Neovim
sudo pacman -S neovim

# Install VSCode
yay -S visual-studio-code-bin
# or
```

#### Windows
```powershell
# Install via Chocolatey
choco install neovim
choco install vscode

# Or via Scoop
scoop install neovim
scoop bucket add extras
scoop install vscode
```

### Extension Installation

1. **Install the vscode-neovim extension**:
   ```bash
   code --install-extension asvetliakov.vscode-neovim
   ```

2. **Install recommended extensions** (see `vscode-extensions.md` for complete list):
   ```bash
   # Essential extensions
   code --install-extension esbenp.prettier-vscode
   code --install-extension dbaeumer.vscode-eslint
   code --install-extension ryuta46.multi-command
   code --install-extension eamodio.gitlens
   ```

### Configuration Setup

1. **Clone this repository**:
   ```bash
   git clone https://github.com/yourusername/vscode-settings.git
   cd vscode-settings
   ```

2. **Copy VSCode settings**:

   **macOS/Linux**:
   ```bash
   # Copy settings
   cp settings.json "$HOME/.config/Code/User/settings.json"
   cp keybindings.json "$HOME/.config/Code/User/keybindings.json"
   ```

   **Windows**:
   ```powershell
   # Copy settings
   Copy-Item settings.json "$env:APPDATA\Code\User\settings.json"
   Copy-Item keybindings.json "$env:APPDATA\Code\User\keybindings.json"
   ```

3. **Setup Neovim configuration**:

   Create or update your Neovim configuration to include the VSCode-specific keymaps:

   ```bash
   # Create Neovim config directory if it doesn't exist
   mkdir -p ~/.config/nvim

   # Copy the VSCode keymaps
   cp vscode-neovim-keymaps.lua ~/.config/nvim/
   ```

4. **Update your Neovim init.lua**:

   Add this to your `~/.config/nvim/init.lua`:

   ```lua
   -- VSCode-Neovim integration
   if vim.g.vscode then
     -- VSCode Neovim specific configuration
     require('vscode-neovim-keymaps')
   else
     -- Regular Neovim configuration
     -- Your existing config here...
   end
   ```

### VSCode Settings Configuration

Update the Neovim executable path in your VSCode settings based on your system:

**macOS (Homebrew)**:
```json
{
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.darwin": "/Users/yourusername/.config/nvim/init.lua"
}
```

**Linux**:
```json
{
  "vscode-neovim.neovimExecutablePaths.linux": "/usr/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.linux": "/home/yourusername/.config/nvim/init.lua"
}
```

**Windows**:
```json
{
  "vscode-neovim.neovimExecutablePaths.win32": "C:\\tools\\neovim\\nvim-win64\\bin\\nvim.exe",
  "vscode-neovim.neovimInitVimPaths.win32": "C:\\Users\\yourusername\\AppData\\Local\\nvim\\init.lua"
}
```

## üéØ Usage Guide

### Essential Keybindings

#### File Operations
- `<leader>p` - Quick Open (Ctrl+P)
- `<leader>ff` - Find files (fuzzy search)
- `<leader>fg` - Live grep/find in files
- `<leader>e` - Toggle file explorer
- `<leader>w` - Save file
- `<leader>W` - Save all files

#### Buffer Management
- `<leader>bd` - Close current buffer
- `<leader>bo` - Close other buffers
- `<leader>bp` - Pin/unpin buffer
- `pb` / `nb` - Previous/next buffer
- `<leader>1-9` - Go to buffer by position

#### Window Management
- `<leader>h/j/k/l` - Navigate between editor groups
- `<leader>/` - Split vertically
- `<leader>-` - Split horizontally
- `<leader>wd` - Close current split

#### Search & Replace
- `<leader>ss` - Search in current file
- `<leader>sr` - Search and replace in file
- `<leader>sR` - Search and replace in workspace

#### Git Integration
- `<leader>gg` - Open source control
- `<leader>gb` - Toggle git blame
- `<leader>gd` - Git diff current file
- `]h` / `[h` - Next/previous git hunk

#### Code Actions
- `K` - Show hover information
- `<leader>ca` - Code actions
- `<leader>cf` - Format document
- `<leader>cp` - Command palette

### VSCode-Specific Features

The configuration also includes VSCode-specific keybindings that work outside of Neovim mode:

- `Cmd+H` (macOS) / `Ctrl+H` - Toggle sidebar
- `Cmd+L` (macOS) / `Ctrl+L` - Toggle auxiliary bar
- `Cmd+J` (macOS) / `Ctrl+J` - Toggle terminal
- `jk` - Escape from insert mode (when in Neovim mode)

## üé® Customization

### Adding Custom Keybindings

To add your own keybindings, edit the `vscode-neovim-keymaps.lua` file:

```lua
-- Custom keybinding example
keymap("n", "<leader>custom", "<cmd>lua require('vscode').action('workbench.action.customCommand')<CR>")
```

### VSCode Command Integration

To find VSCode command IDs for integration:

1. Open Command Palette (`Cmd+Shift+P` / `Ctrl+Shift+P`)
2. Type "Developer: Reload Window"
3. Open Developer Console (`Help` > `Toggle Developer Tools`)
4. Run commands and observe the console for command IDs

### Theming

The configuration uses:
- **Theme**: Tokyo Night Pro
- **Icons**: Bearded Icons
- **Font**: CommitMono Nerd Font

Customize these in `settings.json`:

```json
{
  "workbench.colorTheme": "Your Theme Name",
  "workbench.iconTheme": "your-icon-theme",
  "editor.fontFamily": "Your Font"
}
```

## üîß Troubleshooting

### Common Issues

**Neovim not found**:
- Verify Neovim installation: `nvim --version`
- Update the executable path in VSCode settings
- Restart VSCode after path changes

**Keybindings not working**:
- Ensure the `vscode-neovim` extension is installed and enabled
- Check that the Neovim configuration is loading correctly
- Verify no conflicting keybindings in VSCode

**Performance issues**:
- Disable unnecessary extensions
- Reduce the number of active Neovim plugins
- Check VSCode's performance monitor

### Debug Mode

Enable debug logging in `settings.json`:

```json
{
  "vscode-neovim.logOutputToConsole": true
}
```

## ü§ù Contributing

Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## üìù License

This configuration is released under the MIT License. Feel free to use, modify, and distribute as needed.

## üôè Acknowledgments

- [vscode-neovim](https://github.com/asvetliakov/vscode-neovim) - The bridge between VSCode and Neovim
- [LazyVim](https://github.com/LazyVim/LazyVim) - Inspiration for keybinding patterns
- [Neovim](https://neovim.io/) - The extensible text editor
- [Visual Studio Code](https://code.visualstudio.com/) - The versatile code editor

---

*Happy coding with the best of both worlds! üöÄ*
